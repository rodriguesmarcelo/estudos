git init -> Iniciar projeto (main é o novo termo para master)
git status -> Estado do repositório, se tem arquivo alterado
git config --local user.name "Seu nome aqui" (ou --global para o pc, --local indica que é para o projeto)
git config --local user.email "Seu email aqui"
git add . (para todos os arquivos da pasta) ou git add nome do arquivo
git commit -m "mensagem para identificar o que foi alterado"
git log -> verificar o que foi comitado
git init --bare (servidor puro sem cópia física)
git clone -> clone um repositório
git remote add local "Caminho" -> adiciona um repositorio remoto
git remote rename master local

git push local master (indica que vou empurrar as alterações do repositório "local" para a "master")

git pull local master (indica que vou buscar os dados da "master" para o repositório "local")

git branch nome_branch_task (ou git checkout -b nome_branch_task - já cria a branch e faz o checkout)
git checkout nome_branch_task (muda para a branch)
git merge nome_branch (irá mesclar as branchs, primeiro faço checkout e depois falo de qual branch vou pegar os dados)
git rebase nome_branch (atualiza a branch que estou com os commits de outra branch)
no merge é gerado outro commit no log, no rebase apenas aplica o comiit de outra branch

git stash -> armazena os dados alterados para serem recuperados depois
git stash list -> lista os dados armazenados
git stash apply 0 -> recupera a posição 0 da lista (necessário dar git stash drop para limpar)
git stash pop -> recupera e limpa da lista 

git diff (mostra o que foi alterado)
git tag -a v0.1.0 -m "texto" (cria um ponto de marco, para indicar que ali gerou uma versão estavel)
git push local v0.1.0 (enviar a tag ao github)

---control z
git checkout -- ou git checkout --arquivo.txt (desfazer alteração)
o comando checkout navega entre estados do repositório

git reset HEAD nome_arquivo (depois de ter feito o commit e quero desfazer, sem enviar no push, 
tem que fazer o checkout -- para descartar o ajuste)

git revert [hash do log] (desfazer algo que já foi feito o push)

--------- pull request / fork
fork -> clono um repositorio para realizar ajustes
pull request -> envio os dados para repositorio atual

para unificar varios commits antes de realizar o push:
git log --oneline -> para verificar os commits
git rebase -i HEAD~3 -> vai aparecer o pick com o commit, 
depois disso nas linhas abaixo, coloco o "s" (squash juntar) e o hash do commit que quero juntar
para sair e salvar "+x"

git cherry-pick [hash] -> trazer um commit específico para a branch
git blame nome-arquivo -> trazer o responsável por cada linha do código

------------ git flow

git branch development -> criar a branch dev para enviar os ajustes
git checkout -b feature/o-que-vou-fazer -> cada ajuste separado

git checkout development
git merge feature/o-que-vou-fazer -> após terminar o ajuste, trago as alterações para a branch dev

git checkout -b hotfix/v0.1.1 -> ajuste de bug
git checkout master 
git merge hotfix/v0.1.1
git tag -a v0.1.1 -> fecha a versao do bug

trazer a correção do bug para o branch dev
git checkout development
git merge hotfix/v0.1.1

criar o branch com todos os ajuste para teste
git checkout -b release/v0.2.0

após tudo testado, coloco em producao
git checkout master
git merge release/v0.2.0
git tag -a v0.2.0 -m "Fechando 0.2"

git branch -d {nome_branch} remove uma branch que já tem seu trabalho unido à branch atual
git branch -D {nome_branch} força apagar uma branch mesmo que não fiz os commits na branch atual